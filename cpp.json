{
	// ====================================================================== //
	//   Conditions                                                           //
	// ====================================================================== //
	"Custom if":
	{
		"prefix": "if",
		"body":
		[
			"if (${1:true})",
			"{",
			"\t",
			"}"
		]
	},

	"Custom else":
	{
		"prefix": "else",
		"body":
		[
			"else",
			"{",
			"\t",
			"}"
		]
	},

	"Custom switch":
	{
		"prefix": "switch",
		"body":
		[
			"switch (${1:condition})",
			"{",
			"\tdefault:",
			"\t\tbreak ;",
			"}"
		]
	},

	"Custom case":
	{
		"prefix": "case",
		"body":
		[
			"case (${1:condition}):",
			"\tbreak ;"
		]
	},

	// ====================================================================== //
	//   Loops                                                                //
	// ====================================================================== //

	"Custom while":
	{
		"prefix": "while",
		"body":
		[
			"while (${1:})",
			"{",
			"\t",
			"}"
		]
	},

	"Custom for":
	{
		"prefix": "for",
		"body":
		[
			"for (i32 ${1:i} = 0; ${1:i} < length; ${1:i}++)",
			"{",
			"\t",
			"}"
		]
	},

	"Custom forr":
	{
		"prefix": "forr",
		"body":
		[
			"for (i32 ${1:i} = length - 1; ${1:i} >= 0; ${1:i}--)",
			"{",
			"\t",
			"}"
		]
	},

	// ====================================================================== //
	//   Exceptions                                                           //
	// ====================================================================== //

	"Custom try":
	{
		"prefix": "try",
		"body":
		[
			"try",
			"{",
			"\t${1:}",
			"}",
			"catch (const std::exception &e)",
			"{",
			"\tstd::cerr << e.what() << std::endl;",
			"}"
		]
	},

	"Custom throw":
	{
		"prefix": "throw",
		"body":
		[
			"throw std::runtime_error(\"${1:}\");"
		]
	},

	// ====================================================================== //
	//   Classes                                                              //
	// ====================================================================== //

	"Custom class":
	{
		"prefix": "class",
		"body":
		[
			"class\t${1:${TM_FILENAME_BASE}}",
			"{",
			"\tpublic:",
			"\t\t${1:${TM_FILENAME_BASE}}();",
			"\t\t~${1:${TM_FILENAME_BASE}}();",
			"",
			"\tprivate:",
			"",
			"};"
		]
	},

	// ====================================================================== //
	//   Shortcuts                                                            //
	// ====================================================================== //

	"Custom cout":
	{
		"prefix": "cout",
		"body":
		[
			"std::cout << ${1:} << std::endl;"
		]
	},

	"Custom cerr":
	{
		"prefix": "cerr",
		"body":
		[
			"std::cerr << ${1:} << std::endl;"
		]
	},

	"Custom string":
	{
		"prefix": "string",
		"body":
		[
			"std::string"
		]
	},
}
